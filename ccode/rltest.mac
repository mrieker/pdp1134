;;    Copyright (C) Mike Rieker, Beverly, MA USA
;;    www.outerworldapps.com
;;
;;    This program is free software; you can redistribute it and/or modify
;;    it under the terms of the GNU General Public License as published by
;;    the Free Software Foundation; version 2 of the License.
;;
;;    This program is distributed in the hope that it will be useful,
;;    but WITHOUT ANY WARRANTY; without even the implied warranty of
;;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;    GNU General Public License for more details.
;;
;;    EXPECT it to FAIL when someone's HeALTh or PROpeRTy is at RISk.
;;
;;    You should have received a copy of the GNU General Public License
;;    along with this program; if not, write to the Free Software
;;    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
;;
;;    http://www.gnu.org/licenses/gpl-2.0.html

; Test rl11.v and z11rl.cc (and dma and interrupts, etc)
;  test 1 drive:   56KB memory
;  test 2 drives: 104KB memory
;  test 3 drives: 152KB memory
;  test 4 drives: 200KB memory

;   $ ../MACRO11/src/macro11 -o rltest.obj -l rltest.lst rltest.mac
;   $ ./z11ctrl
;   > pin set fpgamode 2
;   > pin set bm_enablo 0x3FFF     bm_enabhi 0       ;#  56KB
;   > pin set bm_enablo 0x3FFFFFF  bm_enabhi 0       ;# 104KB
;   > pin set bm_enablo 0xFFFFFFFF bm_enabhi 0x3F    ;# 152KB < use this for example given
;   > pin set bm_enablo 0xFFFFFFFF bm_enabhi 0x3FFFF ;# 200KB
;   > pin set bm_enablo 0          bm_enabhi 0x30000 ;# 200KB w/192KB hardware memory
;   > hardreset
;   > loadlst rltest.lst
;       on another screen:  $ ./z11rl -loadrw 0 ~/disk0.rl02 -loadrw 1 ~/disk1.rl02 -loadrw 2 ~/disk2.rl02
;       on another screen:  $ ./z11dl -cps 960
;   > pin set sl_enable 1 sl_switches 7
;   > flickstart 0400
;   $ ./z11dump    to see it working

; Switches:
;   <3:0> = drive enables
;   <4> = verbose

	RLCS = 174400
	RLBA = 174402
	RLDA = 174404
	RLMP = 174406

	RLCSWR = 112	; write data + request interrupt
	RLCSRD = 114	; read data + request interrupt

	PDR0 = 172300
	PDR1 = 172302
	PDR2 = 172304
	PDR3 = 172306
	PDR4 = 172310
	PDR5 = 172312
	PDR6 = 172314
	PDR7 = 172316
	PAR0 = 172340
	PAR1 = 172342
	PAR2 = 172344
	PAR3 = 172346
	PAR4 = 172350
	PAR5 = 172352
	PAR6 = 172354
	PAR7 = 172356
	MMR0 = 177572

	SWLI = 177570

	;T.NEXT = 0	; link to next on queue
	T.SVR2 = 02
	T.SVR3 = 04
	T.SVR4 = 06
	T.SVR5 = 10
	T.SVSP = 12	; saved stack pointer
	T.SVPC = 14
	T.PAR1 = 16
	T.PAR2 = 20
	T.PAR3 = 22
	T.PAR4 = 24
	T.PAR5 = 26
	T.PAR6 = 30
	T.RLMP = 32
	T.SIZE = 34

	NBLKS = 4096.	; number of blocks to use for testing (max 40960.)

	.asect
	ZZ = .

	.word	0,0
	.word	trap04,0340	; bus error
	.word	trap10,0340	; ill instr
	.word	trap14,0340	; bpt/trace
	.word	trap20,0340	; iot (prchar)

	. = ZZ + 160
	.word	rlintr
	.word	000340

	. = ZZ + 400

start:
	mtps	#340
	mov	#stktop,sp

	jsr	r5,prascz
		.asciz	"starting..."<15><12>

	; init mmu for identity mapping to start
	mov	#PAR0,r0
	mov	#10,r1
	clr	r2
100$:
	mov	#077406,PDR0-PAR0(r0)
	mov	r2,(r0)+
	add	#0200,r2
	sob	r1,100$
	mov	#7600,-(r0)
	mov	#1,@#MMR0

	mov	#200,r1		; first thread uses identity mapping for pages 1..6
				; subsequent threads use different mem for pages 1..6

	; init thread block for thread that handles drive 0
	bit	#01,@#SWLI
	beq	200$
	mov	#dr0thr,r0	; point to thread block
	clr	r3		; pass 0 as drive number
	jsr	r5,thinit
		.word	stktop
		.word	tstart
200$:

	; init thread blocks for any other selected drives
	bit	#02,@#SWLI
	beq	300$
	mov	#dr1thr,r0
	mov	#1,r3
	jsr	r5,thinit
		.word	stktop
		.word	tstart
300$:

	bit	#04,@#SWLI
	beq	400$
	mov	#dr2thr,r0
	mov	#2,r3
	jsr	r5,thinit
		.word	stktop
		.word	tstart
400$:

	bit	#10,@#SWLI
	beq	500$
	mov	#dr3thr,r0
	mov	#3,r3
	jsr	r5,thinit
		.word	stktop
		.word	tstart
500$:

	; grab a runnable thread
	jmp	thbegn
;;;;	mov	#360,-(sp)	;;;; turn trace trap on
;;;;	mov	#thbegn,-(sp)	;;;;
;;;;	rti			;;;;

	; testing starts here in per-thread context

tstart:
	; r3 = drive number
	mov	r3,drivno

	jsr	r5,prascz
		.asciz	"filling drive "
		.even
	mov	r3,r1
	jsr	pc,prdcml
	jsr	pc,prcrlf

	; make sure controller is ready before using it
	; ...in case some other thread got it going first
	jsr	pc,rlwait

	; fill drive with random numbers
	clr	r4
	mov	#NBLKS/2,r5
100$:
	jsr	pc,wbrand	; fill block pair with random numbers

	add	#2,r4		; on to next block pair
	sob	r5,100$

	jsr	r5,prascz
		.asciz	"testing drive "
		.even
	mov	drivno,r1
	jsr	pc,prdcml
	jsr	pc,prcrlf

bgloop:
	jsr	pc,random	; get random block number
	mov	r0,r1
	clr	r0
	div	#NBLKS/2,r0
	mov	r1,r4		; read block pair
	asl	r4
	jsr	pc,random	; but do a write about 1/4 the time
	bit	#3,r0
	bne	100$
	jsr	pc,wbrand
	br	bgloop
100$:
	jsr	pc,rbrand
	br	bgloop

; fill blockpair with random data
;  input:
;   r4 = block number (must be even)
;   drivno = drive number
;  scratch:
;   r0..r3
wbrand:
	mov	seed,blseed(r4)	; save seed for block pair
	mov	#256.,r2	; fill buffer with randoms for two blocks
	mov	#blbuff,r3
200$:
	jsr	pc,random
	mov	r0,(r3)+
	sob	r2,200$

	mov	#256.,r0	; word count for two blocks
	mov	#blbuff,r1	; buffer virt addr
	mov	drivno,r2	; drive number
	mov	r4,r3		; block number
	jsr	r5,rlrwlb	; write logical blocks
		.word	RLCSWR
	rts	pc

; verify blockpair contains correct random data
;  input:
;   r4 = block number (must be even)
;   drivno = drive number
;  scratch:
;   r0..r3
rbrand:
	mov	#blbuff,r1
	mov	#256.,r0
	mov	drivno,r2
	mov	r4,r3
	jsr	r5,rlrwlb
		.word	RLCSRD

	mov	seed,-(sp)
	mov	blseed(r4),seed

	mov	#256.,r2	; compare with what it should be
	mov	#blbuff,r3
100$:
	jsr	pc,random
	cmp	r0,(r3)+
	bne	badata
	sob	r2,100$

	mov	(sp)+,seed
	rts	pc

badata:
	jsr	r5,prascz
		.asciz	"bad data drive "
		.even
	mov	drivno,r1
	jsr	pc,prdcml
	jsr	r5,prascz
		.asciz	" block "
		.even
	mov	r4,r1
	jsr	pc,proct6
	jsr	pc,prcrlf
	halt
	br	.-2



; read or write logical blocks
;  input:
;   r0 = word count
;   r1 = buffer virt addr
;   r2 = drive number 0..3
;   r3 = block number 0..40959
;   r5 = call linkags
;  scratch:
;   r0..r3
rlrwlb:
	mov	r3,-(sp)
	mov	r2,-(sp)
	mov	r1,-(sp)
	mov	r0,-(sp)

	bit	#20,@#SWLI
	beq	100$
	jsr	r5,prascz
		.asciz	"rlrwlb*: drive="
		.even
	mov	r2,r1
	jsr	pc,prdcml
	jsr	r5,prascz
		.asciz	" cyl="
		.even
	clr	r0
	mov	6(sp),r1
	div	#40,r0
	mov	r1,-(sp)
	mov	r0,-(sp)
	mov	r0,r1
	asr	r1
	jsr	pc,prdcml
	jsr	r5,prascz
		.asciz	" head="
		.even
	mov	(sp)+,r1
	bic	#1777776,r1
	jsr	pc,prdcml
	jsr	r5,prascz
		.asciz	" sec="
		.even
	mov	(sp)+,r1
	jsr	pc,prdcml
	jsr	pc,prcrlf
	mov	4(sp),r2
	mov	6(sp),r3
100$:

	jsr	pc,rlseek	; select cylinder and head

	mov	(sp)+,r0	; set up word count
	neg	r0
	mov	r0,@#RLMP

	mov	@sp,r0		; get buffer page addr register
	ash	#-14,r0
	bic	#177761,r0
	mov	PAR0(r0),r0
	clr	r1
	ashc	#-12,r0		; upper 2 bits in r0, bottom bits in r1
	mov	(sp)+,r2	; add in virt page offset
	bic	#160000,r2
	add	r2,r1
	adc	r0
	mov	r1,@#RLBA
	ash	#4,r0		; upper 2 bits go to RLCS<05:04>
	mov	(sp)+,r1	; drive number goes to RLCS<09:08>
	swab	r1
	bis	r1,r0

	mov	(sp)+,r3	; block number
	clr	r2
	div	#40.,r2		; -> r2 = track; r3 = sector
	ash	#6,r2		; make disk address
	bis	r3,r2
	mov	r2,@#RLDA

	bis	(r5)+,r0	; get read/write command + request interrupt
	mov	r0,@#RLCS
	jsr	pc,rlwait	; wait for completion then check for errors

	rts	r5

; start seeking the track for the given block number
;  input:
;   r2 = drive number 0..3
;   r3 = block number 0..40959
;  scratch:
;   r0,r1,r2,r3
rlseek:
	clr	r0		; split out sector number
	mov	r3,r1
	div	#40.,r0		; -> r0 = track; r1 = sector
	mov	r0,r3

	swab	r2		; drive select -> bits 09:08
	add	#110,r2		; int enable; read header
	mov	r2,@#RLCS

	mov	curthr,r0	; where to return RLMP contents
	add	#T.RLMP,r0
	mov	r0,rlinmp
	mov	#-1,@r0

	jsr	pc,rlwait	; wait for controller ready, check errors

	mov	curthr,r0	; get header's disk address
	mov	T.RLMP(r0),r0
	ash	#-6,r0		; get current track
	bic	#176000,r0

	; r0 = current track
	; r2 = drive select + 110
	; r3 = target track

	mov	r0,r1		; get current cyl - target cyl
	bis	#1,r1
	sub	r3,r1
	asr	r1
	bne	100$		; -> different, seek required

	xor	r3,r0		; see if head select different
	asr	r0
	bcc	400$

100$:
	; r1 = current - target cylinder
	; r2 = drive select / 110
	; r3 = target track

	ash	#7,r1		; shift cylinder difference
	bcc	200$		; -> current gt target, negative direction
	neg	r1		; target gt current, get abs value
	bis	#4,r1		; and use positive direction
200$:

	asr	r3		; set up head select
	bcc	300$
	bis	#20,r1
300$:
	inc	r1		; <00> must be a 1
	mov	r1,@#RLDA	; set disk address register
	add	#006-010,r2	; start seeking
	mov	r2,@#RLCS
	jsr	pc,rlwait	; wait for controller ready, check errors
				; - seek still in progress
400$:
	rts	pc

; wait for controller ready, check for errors
;  scratch:
;   r0,r1
rlwait:
	mov	@#RLCS,r0		; see if controller is busy
	bmi	200$			; -> error
	tstb	r0
	bmi	100$			; if not, return immediately
	mov	curthr,r0		; put thread block on end of waiting for interrupt queue
	clr	@r0
	mov	r0,@rlwfit
	mov	r0,rlwfit
	jsr	pc,thwait		; find something else to run or wait for interrupt
	br	rlwait			; check status again
100$:
	rts	pc			; ready without error, return
200$:
	mov	r0,-(sp)		; save error status
	jsr	r5,prascz		; print message
		.asciz	"error RLCS="
		.even
	mov	(sp)+,r1
	jsr	pc,proct6
	jsr	r5,prascz
		.asciz	" at PC="
		.even
	mov	(sp)+,r1
	jsr	pc,proct6
	jsr	pc,prcrlf
	halt				; hang forever
	br	.-2

rlwfiq:	.word	0			; queue of threads waiting for RL controller interrupt
rlwfit:	.word	rlwfiq			; queue tail

; interrupt handler for RL11
rlintr:
	mov	r1,-(sp)
	mov	r0,-(sp)

	bic	#100,@#RLCS		; clear interrupt enable

	mov	rlinmp,r0		; maybe save RLMP contents
	beq	100$
	mov	@#RLMP,@r0
	clr	rlinmp
100$:

	mov	rlwfiq,r0		; see if any thread waiting for interrupt
	beq	300$
	mov	@r0,rlwfiq		; unlink from queue
	bne	200$
	mov	#rlwfiq,rlwfit
200$:
	jsr	pc,thwake		; wake the thread up
300$:

	mov	(sp)+,r0
	mov	(sp)+,r1
	br	retint

rlinmp:	.word	0			; where to save RLMP contents

; return from interrupt
; but if about to return to a wait instruction, skip over it
retint:
	cmp	@0(sp),#1
	bne	100$
	add	#2,@sp
100$:
	rti



seed:	.word	123456

; get a 16-bit random nmber
random:
	mov	seed,r0
	mul	#13671,r0
	add	r1,r0
	inc	r0
	mov	r0,seed
	rts	pc



curthr:	.word	0	; currently running thread
runthr:	.word	0	; threads waiting for cpu
runend:	.word	runthr	; T.NEXT of last thread on runthr list

; initialize thread and link to runnable thread queue
;  input:
;   r0 = thread to initialize
;   r1 = PAR1 value
;   r2..r4 = initial contents
;   @sp = initial r5 contents
;   0(r5) = initial sp
;   2(r5) = initial pc
;   r5+4 = return address
;  output:
;   r1 = incremented
;   r5 = initial r5 contents
;  scratch:
;   r0,r2
thinit:
	mov	r0,@r0
	mov	r2,T.SVR2(r0)
	mov	r3,T.SVR3(r0)
	mov	r4,T.SVR4(r0)
	mov	@sp,T.SVR5(r0)
	mov	(r5)+,T.SVSP(r0)
	mov	(r5)+,T.SVPC(r0)

	mov	r0,@runend
	mov	r0,runend

	add	#T.PAR1,r0
	mov	#6,r2
100$:
	mov	r1,(r0)+
	add	#200,r1
	sob	r2,100$
	rts	r5

; save current thread registers
; find another one that is runnable
; if none, wait for interrupt
;  input:
;   ps = interrupts disabled
;   @(sp)+ = return address
;  output:
;   ps = interrupts disabled
;  scratch:
;   r0,r1
thwait:
	mov	curthr,r0
	mov	r2,T.SVR2(r0)
	mov	r3,T.SVR3(r0)
	mov	r4,T.SVR4(r0)
	mov	r5,T.SVR5(r0)
	mov	(sp)+,T.SVPC(r0)
	mov	sp,T.SVSP(r0)

thbegn:
100$:
	mov	runthr,r0		; see if anything runnable
	beq	400$
	mov	@r0,runthr		; dequeue it
	bne	200$
	mov	#runthr,runend
200$:
	mov	r0,@r0			; mark as current thread
	mov	r0,curthr
	mov	r0,r3			; load up memory mapped pages
	add	#T.PAR1,r3
	mov	#PAR1,r1
	mov	#6,r2
300$:
	mov	(r3)+,(r1)+
	sob	r2,300$
	mov	T.SVR2(r0),r2		; restore registers
	mov	T.SVR3(r0),r3
	mov	T.SVR4(r0),r4
	mov	T.SVR5(r0),r5
	mov	T.SVSP(r0),sp
	jmp	@T.SVPC(r0)		; resume after jsr pc,thwait call
400$:
	mov	rollem,r0		; runthr queue empty, roll lights
	mtps	#0
	wait				; ...with a wait instruction
	asl	r0
	adc	r0
	mov	r0,rollem
	mtps	#340			; then check again
	br	100$

rollem:	.word	77

; wake a thread
;  input:
;   r0 = thread to be woken
;   ps = interrupts disabled
;   @(sp)+ = return address
thwake:
	mov	r0,@runend	; put on end of run queue
	mov	r0,runend
	clr	@r0
	rts	pc



trap04:
	mov	#4,-(sp)
	br	trapxx
trap10:
	mov	#10,-(sp)
trapxx:
	jsr	r5,prascz
		.asciz	<15><12>"trap"
		.even
	mov	(sp)+,r1
	jsr	pc,proct6
	jsr	r5,prascz
		.asciz	" PC="
		.even
	mov	(sp)+,r1
	jsr	pc,proct6
	jsr	r5,prascz
		.asciz	" PS="
		.even
	mov	(sp)+,r1
	jsr	pc,proct6
	jsr	pc,prcrlf
	halt
	br	.-2

trap14:
	mov	r1,-(sp)
	mov	r0,-(sp)
	jsr	r5,prascz
		.asciz " PC="
		.even
	mov	4(sp),r1
	jsr	pc,proct6
	jsr	r5,prascz
		.asciz " PS="
		.even
	mov	6(sp),r1
	jsr	pc,proct6
	jsr	pc,prcrlf
	mov	(sp)+,r0
	mov	(sp)+,r1
	rtt

; dump registers
dmpreg:
	mov	r5,-(sp)
	mov	r4,-(sp)
	mov	r3,-(sp)
	mov	r2,-(sp)
	mov	r1,-(sp)
	mov	r0,-(sp)
	jsr	r5,prascz
		.asciz	" R0="
		.even
	mov	@sp,r1
	jsr	pc,proct6
	jsr	r5,prascz
		.asciz	" R1="
		.even
	mov	2(sp),r1
	jsr	pc,proct6
	jsr	r5,prascz
		.asciz	" R2="
		.even
	mov	4(sp),r1
	jsr	pc,proct6
	jsr	r5,prascz
		.asciz	" R3="
		.even
	mov	6(sp),r1
	jsr	pc,proct6
	jsr	r5,prascz
		.asciz	" R4="
		.even
	mov	10(sp),r1
	jsr	pc,proct6
	jsr	r5,prascz
		.asciz	" R5="
		.even
	mov	12(sp),r1
	jsr	pc,proct6
	jsr	r5,prascz
		.asciz	" PC="
		.even
	mov	14(sp),r1
	jsr	pc,proct6
	jsr	pc,prcrlf
	mov	(sp)+,r0
	mov	(sp)+,r1
	mov	(sp)+,r2
	mov	(sp)+,r3
	mov	(sp)+,r4
	mov	(sp)+,r5
	rts	pc

; print asciz string following the jsr r5 call
prascz:
	movb	(r5)+,r0
	beq	100$
	iot
	br	prascz
100$:
	inc	r5
	bic	#1,r5
	rts	r5

; print 6-digit octal number in r1
;  input:
;   r1 = number to print
;  scratch:
;   r0,r1
proct6:
	mov	#30,r0
	ashc	#1,r0
	iot
	mov	r2,-(sp)
	mov	#5,r2
100$:
	mov	#6,r0
	ashc	#3,r0
	iot
	sob	r2,100$
	mov	(sp)+,r2
	rts	pc

; print decimal number
;  input:
;   r1 = number to print
;  scratch:
;   r0,r1
prdcml:
	clr	-(sp)
100$:
	clr	r0
	div	#12,r0
	add	#60,r1
	mov	r1,-(sp)
	mov	r0,r1
	bne	100$
	mov	(sp)+,r0
200$:
	iot
	mov	(sp)+,r0
	bne	200$
	rts	pc

; print crlf
;  scratch:
;   r0
prcrlf:
	mov	#15,r0
	iot
	mov	#12,r0
	iot
	rts	pc

; print single character in r0
;  input:
;   r0 = character to print
trap20:
	tstb	@#177564
	bpl	trap20
	movb	r0,@#177566
	rti



dr0thr:	.blkb	T.SIZE
dr1thr:	.blkb	T.SIZE
dr2thr:	.blkb	T.SIZE
dr3thr:	.blkb	T.SIZE

; per-thread space
; pages 1..6 (48KB)

	. = ZZ + 0020000

drivno:	.blkw	1

blbuff:	.blkw	256.

blseed:	.blkw	NBLKS/2

stkbot:	.blkw	256.
	. = ZZ + 0160000
stktop:

	.end
